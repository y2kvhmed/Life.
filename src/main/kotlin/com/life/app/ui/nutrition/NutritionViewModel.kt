package com.life.app.ui.nutrition

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.life.app.data.model.Meal
import com.life.app.data.model.MealType
import com.life.app.data.model.WaterIntake
import com.life.app.data.repository.MealRepository
import com.life.app.data.remote.DeepseekService
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.time.LocalDateTime
import javax.inject.Inject

/**
 * ViewModel for the Nutrition screen.
 */
@HiltViewModel
class NutritionViewModel @Inject constructor(
    private val mealRepository: MealRepository,
    private val deepseekService: DeepseekService
) : ViewModel() {

    private val _uiState = MutableStateFlow(NutritionUiState())
    val uiState: StateFlow<NutritionUiState> = _uiState.asStateFlow()

    init {
        loadMeals()
        loadWaterIntake()
    }

    /**
     * Load user's meals from the repository.
     */
    private fun loadMeals() {
        viewModelScope.launch {
            try {
                _uiState.update { it.copy(isLoading = true) }
                val meals = mealRepository.getMeals()
                val mealUiModels = meals.map { meal ->
                    MealUiModel(
                        id = meal.id,
                        name = meal.name,
                        type = meal.type,
                        description = meal.description ?: "",
                        time = meal.dateTime
                    )
                }
                _uiState.update { it.copy(
                    meals = mealUiModels,
                    isLoading = false,
                    errorMessage = ""
                ) }
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Failed to load meals"
                ) }
            }
        }
    }

    /**
     * Load user's water intake for today.
     */
    private fun loadWaterIntake() {
        viewModelScope.launch {
            try {
                val todayWaterIntake = mealRepository.getTodayWaterIntake()
                _uiState.update { it.copy(
                    waterIntake = todayWaterIntake?.amount ?: 0f,
                    errorMessage = ""
                ) }
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    errorMessage = e.message ?: "Failed to load water intake"
                ) }
            }
        }
    }

    /**
     * Add a new meal.
     */
    fun addMeal(name: String, type: MealType, description: String) {
        viewModelScope.launch {
            try {
                val meal = Meal(
                    id = 0, // Will be auto-generated by Room
                    userId = "", // Will be set by the repository
                    name = name,
                    type = type,
                    description = description.ifBlank { null },
                    dateTime = LocalDateTime.now()
                )
                
                mealRepository.createMeal(meal)
                
                // Reload meals to show the new one
                loadMeals()
                
                _uiState.update { it.copy(
                    showAddMealDialog = false,
                    errorMessage = ""
                ) }
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    errorMessage = e.message ?: "Failed to add meal"
                ) }
            }
        }
    }

    /**
     * Delete a meal.
     */
    fun deleteMeal(meal: MealUiModel) {
        viewModelScope.launch {
            try {
                mealRepository.deleteMeal(meal.id)
                loadMeals() // Reload meals after deletion
                _uiState.update { it.copy(
                    selectedMeal = null,
                    errorMessage = ""
                ) }
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    errorMessage = e.message ?: "Failed to delete meal"
                ) }
            }
        }
    }

    /**
     * Add water intake.
     */
    fun addWater(amount: Float) {
        viewModelScope.launch {
            try {
                // Get current water intake for today
                val currentWaterIntake = mealRepository.getTodayWaterIntake()
                
                if (currentWaterIntake != null) {
                    // Update existing water intake
                    val updatedWaterIntake = currentWaterIntake.copy(
                        amount = currentWaterIntake.amount + amount
                    )
                    mealRepository.updateWaterIntake(updatedWaterIntake)
                } else {
                    // Create new water intake for today
                    val waterIntake = WaterIntake(
                        id = 0, // Will be auto-generated by Room
                        userId = "", // Will be set by the repository
                        amount = amount,
                        date = LocalDateTime.now()
                    )
                    mealRepository.createWaterIntake(waterIntake)
                }
                
                // Reload water intake to show the updated amount
                loadWaterIntake()
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    errorMessage = e.message ?: "Failed to add water"
                ) }
            }
        }
    }

    /**
     * Generate meal suggestions using Deepseek AI.
     */
    fun generateMealSuggestions() {
        viewModelScope.launch {
            try {
                _uiState.update { it.copy(isGeneratingSuggestions = true) }
                
                val suggestions = deepseekService.generateMealSuggestions()
                
                // Parse the suggestions from the AI response
                val parsedSuggestions = parseMealSuggestions(suggestions)
                
                _uiState.update { it.copy(
                    mealSuggestions = parsedSuggestions,
                    isGeneratingSuggestions = false,
                    errorMessage = ""
                ) }
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    isGeneratingSuggestions = false,
                    errorMessage = e.message ?: "Failed to generate meal suggestions"
                ) }
            }
        }
    }

    /**
     * Parse meal suggestions from the AI response.
     */
    private fun parseMealSuggestions(aiResponse: String): List<String> {
        // Simple parsing logic - split by newlines and filter out empty lines
        // In a real app, this would be more sophisticated based on the AI response format
        return aiResponse.split("\n")
            .map { it.trim() }
            .filter { it.isNotEmpty() }
            .map { line ->
                // Remove bullet points or numbers at the beginning if present
                line.replace(Regex("^[\\d\\s.•\\-–—]*"), "")
                    .trim()
            }
            .filter { it.isNotEmpty() }
            .take(5) // Limit to 5 suggestions
    }

    /**
     * Show the add meal dialog.
     */
    fun showAddMealDialog() {
        _uiState.update { it.copy(showAddMealDialog = true) }
    }

    /**
     * Hide the add meal dialog.
     */
    fun hideAddMealDialog() {
        _uiState.update { it.copy(showAddMealDialog = false) }
    }

    /**
     * Select a meal to view its details.
     */
    fun selectMeal(meal: MealUiModel) {
        _uiState.update { it.copy(selectedMeal = meal) }
    }

    /**
     * Deselect the currently selected meal.
     */
    fun deselectMeal() {
        _uiState.update { it.copy(selectedMeal = null) }
    }

    /**
     * Clear the error message.
     */
    fun clearError() {
        _uiState.update { it.copy(errorMessage = "") }
    }
}

/**
 * UI state for the Nutrition screen.
 */
data class NutritionUiState(
    val meals: List<MealUiModel> = emptyList(),
    val waterIntake: Float = 0f,
    val selectedMeal: MealUiModel? = null,
    val showAddMealDialog: Boolean = false,
    val isLoading: Boolean = false,
    val isGeneratingSuggestions: Boolean = false,
    val mealSuggestions: List<String> = emptyList(),
    val errorMessage: String = ""
)