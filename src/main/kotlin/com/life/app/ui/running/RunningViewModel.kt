package com.life.app.ui.running

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.life.app.data.model.Run
import com.life.app.data.repository.RunRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import java.time.LocalDateTime
import javax.inject.Inject

/**
 * ViewModel for the Running screen.
 */
@HiltViewModel
class RunningViewModel @Inject constructor(
    private val runRepository: RunRepository
) : ViewModel() {

    private val _uiState = MutableStateFlow(RunningUiState())
    val uiState: StateFlow<RunningUiState> = _uiState.asStateFlow()
    
    private var timerJob: Job? = null
    private var startTime: Long = 0
    private var useGps: Boolean = false

    init {
        loadRuns()
    }

    /**
     * Load user's runs from the repository.
     */
    private fun loadRuns() {
        viewModelScope.launch {
            try {
                _uiState.update { it.copy(isLoading = true) }
                val runs = runRepository.getRuns()
                val runUiModels = runs.map { run ->
                    RunUiModel(
                        id = run.id,
                        date = run.date,
                        distance = run.distance,
                        duration = run.duration,
                        notes = run.notes ?: "",
                        mapData = run.mapData
                    )
                }
                _uiState.update { it.copy(
                    runs = runUiModels,
                    isLoading = false,
                    errorMessage = ""
                ) }
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    isLoading = false,
                    errorMessage = e.message ?: "Failed to load runs"
                ) }
            }
        }
    }

    /**
     * Start tracking a run.
     */
    fun startRun(useGps: Boolean) {
        this.useGps = useGps
        startTime = System.currentTimeMillis()
        _uiState.update { it.copy(
            isTracking = true,
            currentDistance = 0f,
            currentDuration = 0L
        ) }
        
        // Start the timer
        timerJob = viewModelScope.launch {
            while (true) {
                val currentTime = System.currentTimeMillis()
                val elapsedTime = currentTime - startTime
                _uiState.update { it.copy(currentDuration = elapsedTime) }
                
                // If using GPS, we would update the distance here based on location updates
                // For this implementation, we'll simulate distance updates
                if (useGps) {
                    simulateDistanceUpdate(elapsedTime)
                }
                
                delay(1000) // Update every second
            }
        }
    }

    /**
     * Simulate distance updates based on time elapsed.
     * In a real app, this would be replaced with actual GPS data.
     */
    private fun simulateDistanceUpdate(elapsedTimeMillis: Long) {
        // Simulate a pace of about 10 minutes per kilometer (6 km/h)
        // This is just for demonstration purposes
        val hours = elapsedTimeMillis / (1000.0 * 60.0 * 60.0)
        val estimatedDistance = hours * 6.0 // 6 km/h pace
        
        _uiState.update { it.copy(currentDistance = estimatedDistance.toFloat()) }
    }

    /**
     * Stop tracking the current run.
     */
    fun stopRun() {
        timerJob?.cancel()
        timerJob = null
        _uiState.update { it.copy(isTracking = false) }
    }

    /**
     * Save the current run.
     */
    fun saveRun(distance: Float, duration: Long, notes: String) {
        viewModelScope.launch {
            try {
                val run = Run(
                    id = 0, // Will be auto-generated by Room
                    userId = "", // Will be set by the repository
                    distance = distance,
                    duration = duration,
                    date = LocalDateTime.now(),
                    notes = notes.ifBlank { null },
                    mapData = if (useGps) generateFakeMapData() else null
                )
                
                runRepository.createRun(run)
                
                // Reset current run data
                _uiState.update { it.copy(
                    currentDistance = 0f,
                    currentDuration = 0L
                ) }
                
                // Reload runs to show the new one
                loadRuns()
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    errorMessage = e.message ?: "Failed to save run"
                ) }
            }
        }
    }

    /**
     * Generate fake map data for demonstration purposes.
     * In a real app, this would be actual GPS coordinates.
     */
    private fun generateFakeMapData(): String {
        // This would be a GeoJSON or similar format in a real app
        return "{\"type\":\"LineString\",\"coordinates\":[[30.0444,31.2357],[30.0445,31.2360],[30.0450,31.2365],[30.0455,31.2370]]}"
    }

    /**
     * Delete a run.
     */
    fun deleteRun(run: RunUiModel) {
        viewModelScope.launch {
            try {
                runRepository.deleteRun(run.id)
                loadRuns() // Reload runs after deletion
            } catch (e: Exception) {
                _uiState.update { it.copy(
                    errorMessage = e.message ?: "Failed to delete run"
                ) }
            }
        }
    }

    /**
     * Select a run to view its details.
     */
    fun selectRun(run: RunUiModel) {
        _uiState.update { it.copy(selectedRun = run) }
    }

    /**
     * Deselect the currently selected run.
     */
    fun deselectRun() {
        _uiState.update { it.copy(selectedRun = null) }
    }

    /**
     * Clear the error message.
     */
    fun clearError() {
        _uiState.update { it.copy(errorMessage = "") }
    }

    override fun onCleared() {
        super.onCleared()
        timerJob?.cancel()
    }
}

/**
 * UI state for the Running screen.
 */
data class RunningUiState(
    val runs: List<RunUiModel> = emptyList(),
    val selectedRun: RunUiModel? = null,
    val isLoading: Boolean = false,
    val isTracking: Boolean = false,
    val currentDistance: Float = 0f,
    val currentDuration: Long = 0L,
    val errorMessage: String = ""
)